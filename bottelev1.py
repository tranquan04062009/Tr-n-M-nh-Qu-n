import logging
import requests
import os
import random
import string
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from tempfile import NamedTemporaryFile

# C·∫•u h√¨nh logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BOT_TOKEN = os.getenv('BOT_TOKEN')
OPENWEATHERMAP_API_KEY = os.getenv('OPENWEATHERMAP_API_KEY')

if not BOT_TOKEN:
    raise ValueError("Bot token is missing! Please set the BOT_TOKEN environment variable.")

# H√†m t·∫°o email v√† m·∫≠t kh·∫©u ng·∫´u nhi√™n
def generate_email_and_password():
    random_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=10))
    domain = random.choice(["gmail.com", "yahoo.com", "outlook.com", "hotmail.com", "aol.com"])
    email = f"{random_string}@{domain}"
    password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
    return email, password

# H√†m l·∫•y m√£ ngu·ªìn HTML
def get_source_code(url):
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.text
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching source code from {url}: {e}")
        return None

# L·ªánh /getsoucre
async def get_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("H√£y cung c·∫•p URL ƒë·ªÉ l·∫•y m√£ ngu·ªìn! üßê")
        return

    url = context.args[0]
    source_code = get_source_code(url)

    if source_code:
        with NamedTemporaryFile(delete=False, suffix='.html') as temp_file:
            temp_file.write(source_code.encode('utf-8'))
            temp_file.close()
            await update.message.reply_document(open(temp_file.name, 'rb'))
    else:
        await update.message.reply_text(f"Kh√¥ng th·ªÉ l·∫•y m√£ ngu·ªìn t·ª´ {url}. üõë")

# L·ªánh /taomail
async def generate_mail_and_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    email, password = generate_email_and_password()
    await update.message.reply_text(f"Email: {email}\nM·∫≠t kh·∫©u: {password} üîê")

# L·ªánh /randomfact
async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    facts = [
        "M·ªôt con voi c√≥ th·ªÉ nghe ƒë∆∞·ª£c ti·∫øng con voi kh√°c t·ª´ xa h∆°n 5km!",
        "Con ng∆∞·ªùi v√† chim c√≥ b·ªô x∆∞∆°ng t∆∞∆°ng t·ª± nhau!",
        "C∆° th·ªÉ con ng∆∞·ªùi ch·ª©a 60% n∆∞·ªõc!",
        "C√¢y b√°ch h∆∞∆°ng c√≥ th·ªÉ s·ªëng ƒë·∫øn 3.000 nƒÉm tu·ªïi."
    ]
    await update.message.reply_text(f"S·ª± th·∫≠t ng·∫´u nhi√™n: {random.choice(facts)} ü§ì")

# L·ªánh /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("H√£y cung c·∫•p t√™n th√†nh ph·ªë! üå§Ô∏è")
        return

    city = " ".join(context.args)
    if not OPENWEATHERMAP_API_KEY:
        await update.message.reply_text("API Key OpenWeatherMap ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh! üåßÔ∏è")
        return

    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHERMAP_API_KEY}&units=metric&lang=vi"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()

        if data.get('cod') == 200:
            weather_desc = data['weather'][0]['description']
            temp = data['main']['temp']
            humidity = data['main']['humidity']
            await update.message.reply_text(
                f"Th·ªùi ti·∫øt t·∫°i {city}:\n- Nhi·ªát ƒë·ªô: {temp}¬∞C\n- ƒê·ªô ·∫©m: {humidity}%\n- M√¥ t·∫£: {weather_desc.capitalize()} üåû"
            )
        else:
            await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho {city}. ‚ùå")
    except requests.exceptions.RequestException as e:
        logger.error(f"Error fetching weather data for {city}: {e}")
        await update.message.reply_text(f"L·ªói khi l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt cho {city}. üõë")

# L·ªánh /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
    L·ªánh kh·∫£ d·ª•ng:
    /getsoucre <url> - L·∫•y m√£ ngu·ªìn HTML.
    /taomail - T·∫°o email & m·∫≠t kh·∫©u ng·∫´u nhi√™n.
    /randomfact - S·ª± th·∫≠t ng·∫´u nhi√™n.
    /weather <city> - Ki·ªÉm tra th·ªùi ti·∫øt.
    /help - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng.
    """)

# H√†m ch√≠nh
async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("getsoucre", get_source))
    application.add_handler(CommandHandler("taomail", generate_mail_and_password))
    application.add_handler(CommandHandler("randomfact", random_fact))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CommandHandler("help", help_command))

    await application.run_polling()

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main())
